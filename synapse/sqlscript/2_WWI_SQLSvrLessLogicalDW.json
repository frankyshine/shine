{
	"name": "2_WWI_SQLSvrLessLogicalDW",
	"properties": {
		"description": "Staging and initial LDW Load",
		"folder": {
			"name": "Synapse SQL/Serverless SQL Pools"
		},
		"content": {
			"query": "\n--CREATE DATABASE sqlSrvlesslogicaldw;\n\nCREATE SCHEMA STG authorization dbo;\nGO\n\nCREATE SCHEMA LDW authorization dbo;\nGO\n\nALTER DATABASE sqlSrvlesslogicaldw COLLATE Latin1_General_100_BIN2_UTF8;\nGO\n\nCREATE EXTERNAL DATA SOURCE ExternalDataSourceDataLake\n\tWITH (\n\t\tLOCATION   = 'https://adlsgen2msdncert.dfs.core.windows.net/adfcookbook/WWI' \n\t    );\n\nGO\n\n\nCREATE EXTERNAL FILE FORMAT SynapseParquetFormat\nWITH ( \n        FORMAT_TYPE = PARQUET\n     );\n\nGO\n\n-- SECURITY\n--*************************\n--************************\n--use  “User Identity” option to enable pass-through authentication\n/*\n in the database scoped credential, the user account which is being used in the Synapse Studio will need \n to be added to the Azure Storage Access Control (IAM) as a Storage Blob Data Contributor\n*/\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'LDWdonshine1';\nGO\n\nCREATE DATABASE SCOPED CREDENTIAL SynapseUserIdentity \nWITH IDENTITY = 'User Identity';\nGO\n\n--Azure Storage Authentication Alternative to a pass through\n/*\ncreate a database scoped credential and another data source which uses the SAS token. You can create multiple database \nscoped credentials and data sources so feel free to create both “User Identity” and “SAS” objects and compare performance.\n*/\n\nCREATE DATABASE SCOPED CREDENTIAL [SasToken]\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n     SECRET = '<SAS_TOKEN_FROM_STORAGE_ACCOUNT>';\nGO\n\nCREATE EXTERNAL DATA SOURCE ExternalDataSourceDataLakeSAS\nWITH (    LOCATION   = 'https://adlsgen2msdncert.dfs.core.windows.net/adfcookbook/WWI',\n          CREDENTIAL = SasToken\n) ;\n\nGO\n\n\n-- SECURITY\n--*************************\n\n\n\n\n\n\n--- 1) Creating Staging Views\n-- ****************************\n-- ****************************\n/*\nThere will be no transformation of the source data at this staging phase except for column selection and data type\n assignment for certain views.\n */\n\n\n-- Creating staging Views for FACT data\n-- ****************************\n\n\nCREATE VIEW STG.vwSalesOrders\nAS\nSELECT *,\nCAST(fct.filepath(1) AS DATE) AS FilePathDate\nFROM \nOPENROWSET \n(\n    BULK 'sourcedatapartitionsalesorder/OrderDatePartition=*/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\nCREATE VIEW STG.vwSalesOrdersLines\nAS\nSELECT *,\nCAST(fct.filepath(1) AS DATE) AS FilePathDate\nFROM \nOPENROWSET \n(\n    BULK 'sourcedatapartitionsalesorderline/OrderDate=*/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\n-- Creating staging Views for SalesOrders related dimension data\n-- ****************************\nCREATE VIEW STG.vwCustomers\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Sales_Customers/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\nGO\n\nCREATE VIEW STG.vwCities\nAS\nSELECT CityID,\n        CityName,\n        StateProvinceID,\n        LatestRecordedPopulation\nFROM \nOPENROWSET \n(\n    BULK 'Application_Cities/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\nCREATE VIEW STG.vwStateProvinces\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Application_StateProvinces/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n)\nWITH\n(\n    StateProvinceID TINYINT,\n    StateProvinceCode CHAR(2),\n    StateProvinceName VARCHAR(30),\n    CountryID TINYINT,\n    SalesTerritory VARCHAR(14),\n    LatestRecordedPopulation INT\n) AS fct ;\n\nGO\n\nCREATE VIEW STG.vwCountries\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Application_Countries/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIRSTROW = 2,\n    FIELDTERMINATOR ='|'\n)\nWITH\n(\n    CountryID TINYINT 1,\n    Country VARCHAR(50) 2,\n    IsoCode3 CHAR(3) 4,\n    CountryType VARCHAR(50) 6,\n    LatestRecordedPopulation INT 7,\n    Continent VARCHAR(50) 8,\n    Region VARCHAR(50) 9,\n    Subregion VARCHAR(50) 10\n) AS fct ;\n\nGO\n\nCREATE VIEW STG.vwBuyingGroups\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Sales_BuyingGroups/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\nCREATE VIEW STG.vwDeliveryMethods\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Application_DeliveryMethods/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\nCREATE VIEW STG.vwCustomerCategories\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Sales_CustomerCategories/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\nCREATE VIEW STG.vwPeople\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Application_People/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\n\n-- Creating staging Views for SalesOrderslines related dimension data\n-- ****************************\n\nCREATE VIEW STG.vwSuppliers\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Purchasing_Suppliers/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\nCREATE VIEW STG.vwSupplierCategories\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Purchasing_SupplierCategories/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\nCREATE VIEW STG.vwStockItems\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Warehouse_StockItems/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\nCREATE VIEW STG.vwColors\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Warehouse_Colors/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\nGO\n\n\nCREATE VIEW STG.vwPackageTypes\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'Warehouse_PackageTypes/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\nGO\n\n\n\n\n\n-- 2) loading Multi-dimentional WH Tables\n-- ****************************\n-- ****************************\n/*\n\nUsing CETAS to write from staging view to WH using External Table data as Parquet files\nWe’ll now use CETAS to write the destination folder. Please note the following:\n\na) The load will write the data out to a sub-folder \\01\\ in each dimension (except the Date dimension) \n   as this is the initial load. Future loads will populate a sequence of sub-folders.\n\nb) We use ROW_NUMBER() to generate a surrogate key on type Integer.\n\nc) A ValidFromDate of 2013-01-01 is used as this is the start of our Sales data.\n\nd) Data quality checking such as NULL attributes, , TRIM etc. are currently not being dealt with in this solution for \n  the sake of code brevity.\n\n*/\n\n\n-- 3) \n--*****************************************************\n--*****************************************************\n--Customer\nCREATE EXTERNAL TABLE LDW.DimCustomer\nWITH \n(\n  LOCATION = 'conformed/dimensions/dimcustomer/01',\n  DATA_SOURCE = ExternalDataSourceDataLake,\n  FILE_FORMAT = SynapseParquetFormat\n) \nAS\nSELECT CAST(ROW_NUMBER() OVER(ORDER BY C.CustomerID) AS INT) AS CustomerKey,\n        CAST(C.CustomerID AS INT) AS CustomerID,\n        C.CustomerName,\n        CC.CustomerCategoryName,\n        BG.BuyingGroupName,\n        DM.DeliveryMethodName,\n        DC.CityName AS DeliveryCityName,\n        DSP.StateProvinceName AS DeliveryStateProvinceName,\n        DSP.SalesTerritory AS DeliverySalesTerritory,\n        DCO.Country AS DeliveryCountry,\n        DCO.Continent AS DeliveryContinent,\n        DCO.Region AS DeliveryRegion,\n        DCO.Subregion AS DeliverySubregion,\n        CAST('2013-01-01' AS DATE) AS ValidFromDate\nFROM STG.vwCustomers C\nLEFT JOIN STG.vwCustomerCategories CC On CC.CustomerCategoryID = C.CustomerCategoryID\nLEFT JOIN STG.vwCities DC ON DC.CityID = C.DeliveryCityID\nLEFT JOIN STG.vwStateProvinces DSP ON DSP.StateProvinceID = DC.StateProvinceID\nLEFT JOIN STG.vwCountries DCO ON DCO.CountryID = DSP.CountryID\nLEFT JOIN STG.vwBuyingGroups BG ON BG.BuyingGroupID = C.BuyingGroupID\nLEFT JOIN STG.vwDeliveryMethods DM ON DM.DeliveryMethodID = C.DeliveryMethodID\nORDER BY C.CustomerID;\n\n GO\n\n--StockItem\nCREATE EXTERNAL TABLE LDW.DimStockItem\nWITH \n(\n  LOCATION = 'conformed/dimensions/dimstockitem/01',\n  DATA_SOURCE = ExternalDataSourceDataLake,\n  FILE_FORMAT = SynapseParquetFormat\n) \nAS\nSELECT CAST(ROW_NUMBER() OVER(ORDER BY SI.StockItemID) AS SMALLINT) AS StockItemKey,\nCAST(SI.StockItemID AS SMALLINT) AS StockItemID,\nSI.StockItemName,\nSI.LeadTimeDays,\nC.ColorName,\nOP.PackageTypeName AS OuterPackageTypeName,\nCAST('2013-01-01' AS DATE) AS ValidFromDate\nFROM STG.vwStockItems SI\nLEFT JOIN STG.vwColors C ON C.ColorID = SI.ColorID\nLEFT JOIN STG.vwPackageTypes OP ON OP.PackageTypeID = SI.OuterPackageID\nORDER BY SI.StockItemID;\n GO\n\n\n\n--Supplier\nCREATE EXTERNAL TABLE LDW.DimSupplier\nWITH \n(\n  LOCATION = 'conformed/dimensions/dimsupplier/01',\n  DATA_SOURCE = ExternalDataSourceDataLake,\n  FILE_FORMAT = SynapseParquetFormat\n) \nAS\nSELECT CAST(ROW_NUMBER() OVER(ORDER BY S.SupplierID) AS TINYINT) AS SupplierKey,\nCAST(S.SupplierID AS TINYINT) AS SupplierID,\nS.SupplierName,\nSC.SupplierCategoryName,\nCAST('2013-01-01' AS DATE) AS ValidFromDate\nFROM STG.vwSuppliers S\nLEFT JOIN STG.vwSupplierCategories SC ON SC.SupplierCategoryID = S.SupplierCategoryID\nORDER BY S.SupplierID;\n GO\n\n\n--Date\nCREATE EXTERNAL TABLE LDW.DimDate\nWITH \n(\n  LOCATION = 'conformed/dimensions/dimdate',\n  DATA_SOURCE = ExternalDataSourceDataLake,\n  FILE_FORMAT = SynapseParquetFormat\n) \nAS\nSELECT CAST(DateKey AS INT) AS DateKey,\n        CAST(Date AS DATE) AS Date,\n        CAST(Day AS TINYINT) AS Day,\n        CAST(WeekDay AS TINYINT) AS WeekDay,\n        WeekDayName,\n        CAST(Month AS TINYINT) AS Month,\n        MonthName,\n        CAST(Quarter AS TINYINT) AS Quarter,\n        CAST(Year AS SMALLINT) AS Year\nFROM\nOPENROWSET \n(\n    BULK 'sourcedatadim/datedim/*.csv',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='|'\n) AS fct ;\n\n GO\n\n\n\n-- Loading Facts data\n/* In this scenario we’ll create a single Fact table from the source Sales Order and Sales Order Detail data with a \nlink to all dimensions. As the Sales Order (header) data does not contain any information that must be split out \nacross multiple Sales Order Detail lines such as shipping amounts, we will model our data by taking any header \nattributes down into the detail.\nWe could model our Facts as separate “Header” and “Line” to remove any DISTINCT operations on the \nSales Order count but for this scenario we will model as a single Fact.\n*/\n\nCREATE EXTERNAL TABLE LDW.FactSales\nWITH \n(\n  LOCATION = 'conformed/facts/factsales/initial',\n  DATA_SOURCE = ExternalDataSourceDataLake,\n  FILE_FORMAT = SynapseParquetFormat\n) \nAS\nSELECT  \n  --Surrogate Keys \n    DC.CustomerKey,\n    CAST(FORMAT(SO.OrderDate,'yyyyMMdd') AS INT) as OrderDateKey,\n    DSI.StockItemKey,\n    DS.SupplierKey,\n    --Degenerate Dimensions\n    CAST(SO.OrderID AS INT) AS OrderID,\n    CAST(SOL.OrderLineID AS INT) AS OrderLineID,  \n    --Measure\n    CAST(SOL.Quantity AS INT) AS SalesOrderQuantity, \n    CAST(SOL.UnitPrice AS DECIMAL(18,2)) AS SalesOrderUnitPrice\nFROM STG.vwSalesOrdersLines SOL\nINNER JOIN STG.vwSalesOrders SO ON SOL.OrderID = SO.OrderID\nLEFT JOIN LDW.DimCustomer DC ON DC.CustomerID = SO.CustomerID\nLEFT JOIN LDW.DimStockItem DSI ON DSI.StockItemID = SOL.StockItemID\nLEFT JOIN STG.vwStockItems SI ON SI.StockItemID = DSI.StockItemID\nLEFT JOIN LDW.DimSupplier DS ON DS.SupplierID = SI.SupplierID;\n\n GO\n\n\n\n\n--4) Creating views on LDW Tables\n--*****************************************************\n--*****************************************************\n\n-- Create Views for Dimensions\n/* We now create Views on the newly written Parquet data. The primary reason for this is that further data can be \nwritten to different folders under the specific dimension folder. This is addressed in the 3rd part of this blog \nseries.\n*/\n\n\n\n--Customer\nCREATE VIEW LDW.vwDimCustomer\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'conformed/dimensions/dimcustomer/*/',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'Parquet'\n) AS fct ;\n GO\n\n--StockItem\nCREATE VIEW LDW.vwDimStockItem\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'conformed/dimensions/dimstockitem/*/',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'Parquet'\n) AS fct ;\n GO\n\n--Supplier\nCREATE VIEW LDW.vwDimSupplier\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'conformed/dimensions/dimsupplier/*/',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'Parquet'\n) AS fct  ;\n GO\n\n--Date\nCREATE VIEW LDW.vwDimDate\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'conformed/dimensions/dimdate',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'Parquet'\n) AS fct ;\n GO\n\n-- Create View for Facts\n-- As we did for the Dimensions, we will also create a View over the newly-written Parquet data.\n\nCREATE VIEW LDW.vwFactSales\nAS\nSELECT * FROM \nOPENROWSET \n(\n    BULK 'conformed/facts/factsales/initial',\n    DATA_SOURCE = 'ExternalDataSourceDataLake',\n    FORMAT = 'Parquet'\n) AS fct ;\n GO\n\n\n--Checking Data Types\n--*****************************************\n/* \nWe can also check the data types that have been created, perhaps there is further optimisation available by \nre-writing the data and using more efficient data types.\n*/\n\nEXEC sp_describe_first_result_set N'SELECT * FROM LDW.vwDimDate';\n\nEXEC sp_describe_first_result_set N'SELECT * FROM LDW.vwDimSupplier';\n\nEXEC sp_describe_first_result_set N'SELECT * FROM LDW.vwDimStockItem';\n\nEXEC sp_describe_first_result_set N'SELECT * FROM LDW.vwDimCustomer';\n\nEXEC sp_describe_first_result_set N'SELECT * FROM LDW.vwFactSales';\n\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "sqlSrvlesslogicaldw",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}