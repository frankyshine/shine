{
	"name": "External Tables and Views with Delta Lake Format",
	"properties": {
		"folder": {
			"name": "Synapse SQL/Serverless SQL Pools"
		},
		"content": {
			"query": "\nUsing the Delta Lake Format with External Tables and Views\n*************************************************************\n/* Currently the ability to query Delta Lake format data is in preview and we are able to create Views and External \nTables over this data. What is interesting is that if the source Delta data has an existing partitioning scheme, \nfor example Order Date, then we do not need to use filepath() in our View definition to partition prune. We can \nquery the source data and use the partition schema column and this will successfully partition prune.\n\nWeâ€™ll create a Delta Lake structure using Spark SQL in a Notebook connected to a Spark Pool in the following code and \nthen test creating a View and also an External Table over this data in Serverless SQL Pools.\n*/\n\nCREATE TABLE delta_salesorder\nUSING delta\nPARTITIONED BY (OrderDatePartition)\nLOCATION 'abfss://container@storage.dfs.core.windows.net/spark/deltalake/salesorder'\nAS SELECT OrderID,\n          CustomerID,\n          SalespersonPersonID,\n          PickedByPersonID,\n          ContactPersonID,\n          BackorderOrderID,\n          CAST(OrderDate AS DATE) AS OrderDatePartition,\n          CAST(OrderDate AS DATE) AS OrderDate\nFROM raw_salesorder\n\n\n\n/*\nViews over Delta Lake\n----------------------\nWe can now create a View in Serverless SQL Pools and use the location where the Delta format data was saved to. \nNote that the OPENROWSET function supports partition pruning when the source partition column is used to filter \nin the WHERE clause.\n*/\n\n\nCREATE VIEW LDW.vwDeltaSalesOrders\nAS\nSELECT *\nFROM \nOPENROWSET(\n        BULK 'spark/deltalake/salesorder/',\n        DATA_SOURCE = 'ExternalDataSourceDataLake',\n        FORMAT='DELTA'\n    ) fct\n\n\n/*\nWe can now query the view in Serverless SQL Pools to read the Delta Lake data without requiring a Spark Pool to be\nactive (or even exist). If we use the OrderDatePartition column in the WHERE clause to filter, we can see data \nprocessed is reduced. If we do the same but use the non-partition column OrderDate then although we get the same \nresults we do not see partition pruning.\n*/\n\n\n--Baseline query which shows 64MB data processed\nSELECT CustomerID,\nCOUNT(*) AS SalesOrderCount\nFROM LDW.vwDeltaSalesOrders\nGROUP BY CustomerID\n\n--Filter using the partition schema column we see 1MB data processed (this will be rounded up to 10MB minimum however)\nSELECT CustomerID,\nCOUNT(*) AS SalesOrderCount\nFROM LDW.vwDeltaSalesOrders\nWHERE OrderDatePartition = '2016-06-03'\nGROUP BY CustomerID\n\n--Filter using the non-partitioned column we see the same results but 30MB data processed so no partition pruning\nSELECT CustomerID,\nCOUNT(*) AS SalesOrderCount\nFROM LDW.vwDeltaSalesOrders\nWHERE OrderDate = '2016-06-03'\nGROUP BY CustomerID\n\n\n/*\nExternal Tables over Delta Lake\n--------------------------------\nAlthough we can create External Tables successfully over Delta Lake data, we are unable to take advantage of partition pruning.\nWhen querying the table, the partition column used in the Delta data returns NULL and if used in a WHERE clause it does \nnot return any data.\n*/\n\nCREATE EXTERNAL FILE FORMAT SynapseDeltaFormat\nWITH ( \n        FORMAT_TYPE = DELTA\n     );\n\nCREATE EXTERNAL TABLE LDW.DeltaSalesOrders\n(\n    OrderID INT,\n    CustomerID INT,\n    SalespersonPersonID INT,\n    PickedByPersonID INT,\n    ContactPersonID INT,\n    BackorderOrderID INT,\n    OrderDatePartition DATE,\n    OrderDate DATE\n)\nWITH\n(\n    LOCATION = 'spark/deltalake/salesorder/',\n    DATA_SOURCE = ExternalDataSourceDataWarehouse,  \n    FILE_FORMAT = SynapseDeltaFormat    \n)\n\n/*\nWhen querying this External Table we see NULL for the partition scheme column and if filtering we do not see any data \nbeing returned.\n*/\n\nSELECT TOP 5 * FROM LDW.DeltaSalesOrders\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}