{
	"name": "Create Logical Data Warehouse with serverless SQL pool",
	"properties": {
		"folder": {
			"name": "Synapse SQL/Serverless SQL Pools"
		},
		"content": {
			"query": "\n/* Logical Data Warehouse (LDW) with Serverless SQL Pool\n*********************************************************\n**********************************************************/\nhttps://learn.microsoft.com/en-us/azure/synapse-analytics/sql/tutorial-logical-data-warehouse\n\n\n/*\nIn this tutorial, you will learn how to create a Logical Data Warehouse (LDW) on top of Azure storage and Azure\n Cosmos DB.\n\nLDW is a relational layer built on top of Azure data sources such as Azure Data Lake storage (ADLS), \nAzure Cosmos DB analytical storage, or Azure Blob storage.\n\n\nCreate an LDW database\n*************************************\nYou need to create a custom database where you will store your external tables and views that are referencing \nexternal data sources.*/\n\nCREATE DATABASE Ldw\n      COLLATE Latin1_General_100_BIN2_UTF8;\n\n/*\nThis collation will provide the optimal performance while reading Parquet and Azure Cosmos DB. \nIf you don't want to specify the database collation, make sure that you specify this collation in the \ncolumn definition.\n\n\n\nConfigure data sources and formats\n*************************************\nAs a first step, you need to configure data source and specify file format of remotely stored data.\n\nData sources represent connection string information that describes where your data is placed and how to \nauthenticate to your data source.\n\nOne example of data source definition that references public ECDC COVID 19 Azure Open Data Set is shown\nin the following example: */\n\n\nCREATE EXTERNAL DATA SOURCE ecdc_cases WITH (\n    LOCATION = 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/'\n);\n\n/* A caller may access data source without credential if an owner of data source allowed anonymous access or \ngive explicit access to Azure AD identity of the caller.\n\nYou can explicitly define a custom credential that will be used while accessing data on external data source.\n\n- Managed Identity of the Synapse workspace\n- Shared Access Signature of the Azure storage\n- Custom Service Principal Name or Azure Application identity.\n- Read-only Azure Cosmos DB account key that enables you to read Azure Cosmos DB analytical storage.\n\n\nAs a prerequisite, you will need to create a master key in the database: */\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Setup you password - you need to create master key only once';\n\n/* In the following external data source, Synapse SQL pool should use a managed identity of the workspace \nto access data in the storage. */\n\nCREATE DATABASE SCOPED CREDENTIAL WorkspaceIdentity\nWITH IDENTITY = 'Managed Identity';\nGO\nCREATE EXTERNAL DATA SOURCE ecdc_cases WITH (\n    LOCATION = 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/',\n    CREDENTIAL = WorkspaceIdentity\n);\n\n\n/* In order to access Azure Cosmos DB analytical storage, you need to define a credential containing a read-only\nAzure Cosmos DB account key. */\n\nCREATE DATABASE SCOPED CREDENTIAL MyCosmosDbAccountCredential\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n     SECRET = 's5zarR2pT0JWH9k8roipnWxUYBegOuFGjJpSjGlR36y86cW0GQ6RaaG8kGjsRAQoWMw1QKTkkX8HQtFpJjC8Hg==';\n\n/* Any user with the Synapse Administrator role can use these credentials to access Azure Data Lake storage or\nAzure Cosmos DB analytical storage. If you have low privileged users that do not have Synapse Administrator \nrole, you would need to give them an explicit permission to reference these database scoped credentials: */\n\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::WorkspaceIdentity TO <user>\nGO\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::MyCosmosDbAccountCredential TO <user>\nGO\n\n-- Find more details in grant DATABASE SCOPED CREDENTIAL permissions page.\n\n\n\n/*\nDefine external file formats\n--------------------------------------\nExternal file formats define the structure of the files stored on external data source. You can define Parquet \nand CSV external file formats:*/\n\nCREATE EXTERNAL FILE FORMAT ParquetFormat WITH (  FORMAT_TYPE = PARQUET );\nGO\nCREATE EXTERNAL FILE FORMAT CsvFormat WITH (  FORMAT_TYPE = DELIMITEDTEXT );\n\n\n\n/*  Explore your data\n---------------------------------------\n---------------------------------------\nOnce you set up your data sources, you can use the OPENROWSET function to explore your data. The OPENROWSET\nfunction reads content of a remote data source (for example file) and returns the content as a set of rows.\n*/\n\n\nselect top 10  *\nfrom openrowset(bulk 'latest/ecdc_cases.parquet',\n                data_source = 'ecdc_cases',\n                format='parquet') as a\n\n\n/*\nThe OPENROWSET function will give you information about the columns in the external files or containers and\nenable you to define a schema of your external tables and views.\n\n\n\n\nCreate external tables on Azure storage\n---------------------------------------\n---------------------------------------\nOnce you discover the schema, you can create external tables and views on top of your external data sources. \nThe good practice is to organize your tables and views in databases schemas. In the following query you can \ncreate a schema where you will place all objects that are accessing ECDC COVID data set in Azure data Lake storage:\n\n\ncreate schema ecdc_adls;\nThe database schemas are useful for grouping the objects and defining permissions per schema.\n\nOnce you define the schemas, you can create external tables that are referencing the files. The following external\n table is referencing the ECDC COVID parquet file placed in the Azure storage:\n*/\n\ncreate external table ecdc_adls.cases (\n    date_rep                   date,\n    day                        smallint,\n    month                      smallint,\n    year                       smallint,\n    cases                      smallint,\n    deaths                     smallint,\n    countries_and_territories  varchar(256),\n    geo_id                     varchar(60),\n    country_territory_code     varchar(16),\n    pop_data_2018              int,\n    continent_exp              varchar(32),\n    load_date                  datetime2(7),\n    iso_country                varchar(16)\n) with (\n    data_source= ecdc_cases,\n    location = 'latest/ecdc_cases.parquet',\n    file_format = ParquetFormat\n);\n\n/*\nMake sure that you use the smallest possible types for string and number columns to optimize performance \nof your queries.\n\n\nCreate views on Azure Cosmos DB\n---------------------------------------\n---------------------------------------\nAs an alternative to external tables, you can create views on top of your external data.\nSimilar to the tables shown in the previous example, you should place the views in separate schemas:\n*/\n\ncreate schema ecdc_cosmosdb;\n\n-- Now you are able to create a view in the schema that is referencing an Azure Cosmos DB container:\n\nCREATE OR ALTER VIEW ecdc_cosmosdb.Ecdc\nAS SELECT *\nFROM OPENROWSET(\n      PROVIDER = 'CosmosDB',\n      CONNECTION = 'Account=synapselink-cosmosdb-sqlsample;Database=covid',\n      OBJECT = 'Ecdc',\n      CREDENTIAL = 'MyCosmosDbAccountCredential'\n    ) WITH\n     ( date_rep varchar(20), \n       cases bigint,\n       geo_id varchar(6) \n     ) as rows\n\n/*\nTo optimize performance, you should use the smallest possible types in the WITH schema definition.\n\nNote\nYou should place your Azure Cosmos DB account key in a separate credential and reference this credential \nfrom the OPENROWSET function. Do not keep your account key in the view definition.\n\n\n\nAccess and permissions\n---------------------------------------\n---------------------------------------\nAs a final step, you should create database users that should be able to access your LDW, and give them \npermissions to select data from the external tables and views. In the following script you can see how to \nadd a new user that will be authenticated using Azure AD identity:\n*/\n\nCREATE USER [jovan@contoso.com] FROM EXTERNAL PROVIDER;\nGO\n\n\n--Instead of Azure AD principals, you can create SQL principals that authenticate with the login name and password.\n\n\nCREATE LOGIN [jovan] WITH PASSWORD = 'My Very strong Password ! 1234';\nCREATE USER [jovan] FROM LOGIN [jovan];\n\n\n--In both cases, you can assign permissions to the users.\n\n\nDENY ADMINISTER DATABASE BULK OPERATIONS TO [jovan@contoso.com]\nGO\nGRANT SELECT ON SCHEMA::ecdc_adls TO [jovan@contoso.com]\nGO\nGRANT SELECT ON OBJECT::ecdc_cosmosDB.cases TO [jovan@contoso.com]\nGO\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::MyCosmosDbAccountCredential TO [jovan@contoso.com]\nGO\n\n/*\nThe security rules depend on your security policies. Some generic guidelines are:\n\n- You should deny ADMINISTER DATABASE BULK OPERATIONS permission to the new users because they should be able to \n  read data only using the external tables and views that you prepared.\n\n- You should provide SELECT permission only to the tables that some user should be able to use.\n\n- If you are providing access to data using the views, you should grant REFERENCES permission to the credential \n   that will be used to access external data source.\n\n\nThis user has minimal permissions needed to query external data. If you want to create a power-user who can set\nup permissions, external tables and views, you can give CONTROL permission to the user:\n*/\n\nGRANT CONTROL TO [jovan@contoso.com]\n\n\n\n\n/*\nRole-based security\n---------------------------------------\n---------------------------------------\nInstead of assigning permissions to the individual uses, a good practice it to organize the users into roles and \nmanage permission at role-level. The following code sample creates a new role representing the people who can\n analyze COVID-19 cases, and adds three users to this role:\n*/\n\n\nCREATE ROLE CovidAnalyst;\n\nALTER ROLE CovidAnalyst ADD MEMBER [jovan@contoso.com];\nALTER ROLE CovidAnalyst ADD MEMBER [milan@contoso.com];\nALTER ROLE CovidAnalyst ADD MEMBER [petar@contoso.com];\n\n\n-- You can assign the permissions to all users that belong to the group:\n\n\nGRANT SELECT ON SCHEMA::ecdc_cosmosdb TO [CovidAnalyst];\nGO\nDENY SELECT ON SCHEMA::ecdc_adls TO [CovidAnalyst];\nGO\nDENY ADMINISTER DATABASE BULK OPERATIONS TO [CovidAnalyst];\n\n\n-- This role-based security access control might simplify management of your security rules.\n\n\n\n\n\n\n\n\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}