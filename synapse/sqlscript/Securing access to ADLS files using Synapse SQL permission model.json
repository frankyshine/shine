{
	"name": "Securing access to ADLS files using Synapse SQL permission model",
	"properties": {
		"folder": {
			"name": "Synapse SQL/Serverless SQL Pools"
		},
		"content": {
			"query": "\nhttps://techcommunity.microsoft.com/t5/azure-synapse-analytics-blog/securing-access-to-adls-files-using-synapse-sql-permission-model/ba-p/1796282\n\n\n/*\nAzure Synapse Analytics is analytics service that enables you to implement solutions that enable you users to access \ndata in Azure storage and define permission models that define what user can access some data. Azure Active directory \nis recommended model for accessing data and defining permission rules on your data. In addition to Azure AD permission model,\nyou can define additional security policies that protect your data even in some cases where Azure AD permission model \ncannot be used. In this article you will see how to setup fine-grained security policy for SQL users that can access some \nparts of storage using workspace identity or SAS key. This is must-have setup for scenarios where SQL principals access\ndata or serverless Synapse SQL pool access storage using Managed Identity or SAS token.\n\n \n\nSynapse SQL permission model\n ****************************\nSynapse SQL runtime in Azure Synapse Analytics workspace enables you to define access rights and permissions to read data in\ntwo security layers:\n\n    1. SQL permission layer where you can use standard SQL permission model with users, roles, and permissions defines in SQL runtime.\n    2. ACL rules in Azure storage layer where you can define access rules by assigning storage roles to some AAD users.\n\nPermissions of the user who would like to read data from storage files are checked in both layers: \n\n     -- > Snyapse SQL: SQL Permission\n                     -- > ADLS: ACL Permission\n                                   -- > Storage Files\n\n\nIn order to pass SQL security check, user would need to have some SELECT, GRANT REFERENCES CREDENTIAL, \nADMINISTER BULK OPERATIONS SQL permission to initiate call to ADLS storage layers.\n\nThen request will be checked on storage layer by verifying validity of SAS token that is used to access files, \nor ACL permissions of Azure AD identity that is accessing storage.\n\nYou have flexibility to choose would you configure security check only in SQL, storage or on both places \ndepending on your use case.\n\n \n\nWhen you must use SQL permission model?\n---------------------------------------\nIf you are using Azure Active directory passthrough authentication, you can define granular access rules in\n Azure storage layer and specify which users could access some files and folders by assigning Azure roles \n such as Storage Blob Reader or Storage Blob Owner. In this case you can rely only on ADLS storage security checks.\n\n \n\nHowever, there are some cases when you will not use AAD passthrough:\n    1. When the data placed in ADLS storage and accessed using Shared Access Signature\n    2. When the data placed in ADLS storage and accessed using workspace Managed Identity \n       (common cases for this scenario is when your storage is protected using firewall)\n    3. When the data placed in Cosmos DB analytical is accessed using Cosmos DB read-only keys.\n    4. When you want to prevent AAD users to have any direct access to storage so they can query files only via \n       SQL interface. In this scenario you will enable Synapse SQL to access storage via Managed Identity or SAS token.\n    5. Applications and tool are using SQL principals to access storage using username/password instead of AAD logins. \n       SQL principals may use either SAS token or Managed Identity of workspace to access storage.\n\n\nIf you are using some of these authentication methods, your Synapse SQL runtime has access to any \nfile/folder/container placed in storage layer. If you have different user roles who are accessing data,\nyou need to ensure that some users have access only to some subset of folders. Since you don’t have \nfine-grained ACL permissions on storage, you need to do the following steps to define permissions in SQL runtime:\n\n    1. Create separate users or roles for the group of users who can access some subset of data on storage.\n    2. Create external tables that represent proxies to your data sets on storage. Every external table should reference one \n        set of files on storage.\n    3. Grant users REFERENCES permission to credentials that should be used to access storage.\n    4. DENY ADMINISTER BULK OPERATION permission to prevent users to directly access any file in storage via OPENROWSET and \n        referenced credential.\n    5. GRANT SELECT permission only on external tables that some user groups can access.\n\nLet’s see how to apply this security model in the scenario where two user roles can access only some subfolders\nin storage.\n\n \n\nScenario\n----------\nWe have ADLS storage with three data sets – Product, RetailSales, and StoreDemographics placed in different \nfolders on the same ADLS storage account. Synapse SQL access storage using Managed Identity that has full \naccess to all folders in storage.\n\nWe have two roles in this scenario:\n    1. Sales Managers who can read data about products and retail sales, and\n    2. Store Managers who can access data about products and store demographics.\n\nWe need to ensure that these roles can access only subsets of data, although Synapse SQL has full access. \nTherefore, we need to define access rights on SQL layer that will protect access to the resources.\n\n \n\nCreate users that will access Synapse SQL\n-----------------------------------------\nIn this step we will create two logins that will enable sales managers and store managers to access Synapse SQL:\n*/\n\n\nCREATE LOGIN StoreManager WITH PASSWORD = '100reM4n4G3r!@#$';\nGO\n\nCREATE USER StoreManager FROM LOGIN StoreManager;\nGO\n\nCREATE LOGIN SalesManager WITH PASSWORD = 'Sa<M4n4G3r!@#$';\nGO\n\nCREATE USER SalesManager FROM LOGIN SalesManager;\nGO\n\n\n/*\nNow we have two username/password pairs that can access Synapse SQL, but they still cannot access storage.\n\n \nCreate credentials that will be used to access storage\n----------------------------------------------------\n\nWe need some database scoped credential that Synapse SQL runtime will use to the ADLS access storage. Let’s imagine \nthat we are enabling Synapse SQL to access private storage protected with firewall using Managed Identity of the workspace: */\n\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Y...0'\nCREATE DATABASE SCOPED CREDENTIAL WorkspaceIdentity WITH IDENTITY = 'Managed Identity'\nGO\n\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::WorkspaceIdentity TO StoreManager;\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::WorkspaceIdentity TO SalesManager;\nGO\n\n/*\nOnce we create DATABASE SCOPED CREDENTIAL, we need to enable users to reference that credential so they can access storage.\n\n \n\nPrevent users to explore any data\n---------------------------------\nUsers who have REFERENCES permission on some storage might use OPENROWSET function to access any file on that storage. \nTherefore, we need to ensure that they cannot use this function by explicitly denying ADMINISTER BULK OPERATIONS in \nmaster database and ADMINISTER DATABASE BULK OPERATIONS permissions in data warehouse:\n*/\n\n --> USE master\nDENY ADMINISTER BULK OPERATIONS TO StoreManager;\nDENY ADMINISTER BULK OPERATIONS TO SalesManager;\n\n--> USE RetailStore\nDENY ADMINISTER DATABASE BULK OPERATIONS TO StoreManager;\nDENY ADMINISTER DATABASE BULK OPERATIONS TO SalesManager;\n\n/*\nCreate external tables that reference folders on storage\n---------------------------------------------------------\nSince we have three datasets placed in three folders, we need to create three external tables that will access\n storage using some credential:\n*/\n \nCREATE EXTERNAL DATA SOURCE [Data] WITH\n( LOCATION = N'https://....dfs.core.windows.net/data', CREDENTIAL = WorkspaceIdentity )\nGO\n\nCREATE SCHEMA store\nGO\n\nCREATE EXTERNAL TABLE store.Product (...)\nWITH (DATA_SOURCE = Data, LOCATION = N'Product/',FILE_FORMAT = ParquetSnappy)\nGO\n\nCREATE EXTERNAL TABLE store.[RetailSales] (...)\nWITH (DATA_SOURCE = Data, LOCATION = N'RetailSales/',FILE_FORMAT = ParquetSnappy)\nGO\n\nCREATE EXTERNAL TABLE [store].[StoreDemographics] (...)\nWITH (DATA_SOURCE = Data, LOCATION = N'StoreDemographics/',...)\nGO\n \n\n/*\nAny user that can select data from these tables can read the content of underlying files in ADLA storage.\n\n \nEnable users to access their data sets\n--------------------------------------\nFinally, we need to implement required security settings and allow store managers and sales managers to access only \ntheir data sets via proxy external tables:\n*/\n \nGRANT SELECT ON OBJECT::store.Product TO StoreManager;\nGRANT SELECT ON OBJECT::store.StoreDemographics TO StoreManager;\nGO\n\nGRANT SELECT ON OBJECT::store.Product TO SalesManager;\nGRANT SELECT ON OBJECT::store.RetailSales TO SalesManager;\n\n-- Now if we  try to select data as Store Managers, we will get the results:\n\n\nEXECUTE AS USER 'SalesManager'\nSELECT SUSER_SNAME(), COUNT(*) FROM store.Product\nSELECT SUSER_SNAME(), COUNT(*) FROM store.StoreDemographics\n\n-- However, if these users try to access store.RetailSales they will get error\n\nEXECUTE AS USER 'SalesManager'\nSELECT SUSER_SNAME(), COUNT(*) FROM store.RetailSales\n\n/* The similar results will get sales manager when trying to access the tables.\n\nConclusion\nServerless Synapse SQL runtime enables to define fine-grained permissions and control what resources your users can access.\nEven if you provide full storage  access to Synapse SQL runtime, you are still not loosing ability to define fine-grained \npermission to your users using SQL runtime permission model. */\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}