{
	"name": "1_WWI_SQLSvrlessLogicalDW_DatabaseAndDataSources",
	"properties": {
		"description": "Database and Lake data source",
		"folder": {
			"name": "Synapse SQL/Serverless SQL Pools"
		},
		"content": {
			"query": "\n/*\nCreating a Logical Data Warehouse with Synapse Serverless SQL: Part 1 of 4 – Setting Up and Querying Source Data\nFrom <https://www.serverlesssql.com/creating-a-logical-data-warehouse-with-synapse-serverless-sql-part-1-of-3-setting-up-and-querying-source-data/\n*/\n\n\n--CREATE DATABASE sqlSrvlesslogicaldw;\n\nCREATE SCHEMA STG authorization dbo;\nGO\n\nCREATE SCHEMA LDW authorization dbo;\nGO\n\nALTER DATABASE sqlSrvlesslogicaldw COLLATE Latin1_General_100_BIN2_UTF8;\nGO\n\n--Create External data sources\n/*\nData sources represent connection string information that describes where your data is placed and how to \nauthenticate to your data source.\n\n\n1) A caller may access data source without credential if an owner of data source allowed anonymous access \nor \n2) give explicit access to Azure AD identity of the caller.\n\nYou can explicitly define a custom credential \"DATABASE SCOPED CREDENTIAL\" - SQL service level permission \nthat will be used while accessing data on external data source. it can be done Using;\n\n1. Managed Identity of the Synapse workspace\n2. Shared Access Signature of the Azure storage\n3. Custom Service Principal Name or Azure Application identity.\n4. Read-only Azure Cosmos DB account key that enables you to read Azure Cosmos DB analytical storage.\n\n\nAs a prerequisite, you will need to create a master key in the database:\n\n*/\n--create a master key in the database - you need to create master key only once\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'LDWdonshine1';\nGO\n\n\n-- Create databases scoped credential that use Managed Identity, SAS token or service principal. User needs to create only database-scoped credentials that should be used to access data source:\n\n-- CREATING DATABASE SCOPED CREDENTIAL TO ACCESS EXTERNAL STORAGES\n/*\nNOTE: You can create multiple database scoped credentials and data sources, and even compare \ntheir performance.\n*/\n\n-- Using Managed Identity of the Synapse workspace\nCREATE DATABASE SCOPED CREDENTIAL WorkspaceMngIDCredential \nWITH IDENTITY = 'Managed Identity';\n\n--Using  “User Identity” option to enable pass-through authentication\n/*\n Note: in the database scoped credential, the user account which is being used in the Synapse Studio will need \n to be added to the Azure Storage Access Control (IAM- Identity and Access Management) as a Storage Blob Data Contributor\n*/\nCREATE DATABASE SCOPED CREDENTIAL SynapseUserIdentityCredential  \nWITH IDENTITY = 'User Identity';\nGO\n\n--Using  SAS token - Azure Storage Authentication Alternative to a pass through\nCREATE DATABASE SCOPED CREDENTIAL SASTokenCredential \nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n     SECRET = 'QrTtiLA0CFvwSY+5p394YM2+DQNfitBsbTAHo1yc6q/zYMLzlGUg00d0ibKqIw5vZliihKj9YCWF+AStu1jyIA=='; -- get and past token from ADLS account\nGO\n\n\n\n-- Create data source that one of the credentials above, external file format, and external tables \n--that reference this data source and file format:\n\nAzure storage using \n- Azure AD identity of user, \n- managed identity of workspace.\n- SAS token, \n\n\n\nCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET)\nGO\n\nCREATE EXTERNAL DATA SOURCE mysample\nWITH ( LOCATION = 'https://<storage_account>.dfs.core.windows.net/<container>/<path>'\n-- Uncomment one of these options depending on authentication method that you want to use to access data source:\n--,CREDENTIAL = SynapseUserIdentityCredential \n--,CREDENTIAL = WorkspaceMngIDCredential  \n--,CREDENTIAL = SPNCredential\n)\n\n\nCREATE EXTERNAL FILE FORMAT SynapseParquetFormat\nWITH ( \n        FORMAT_TYPE = PARQUET\n     );\n\nGO\n\n\nCREATE EXTERNAL DATA SOURCE ExternalDataSourceDataLake\n\tWITH (\n\t\tLOCATION   = 'https://adlsgen2msdncert.dfs.core.windows.net/adfcookbook/WWI' \n\t    );\n\nGO\n\n\nCREATE EXTERNAL DATA SOURCE ExternalDataSourceDataLakeSAS\nWITH (    LOCATION   = 'https://adlsgen2msdncert.dfs.core.windows.net/adfcookbook/WWI',\n          CREDENTIAL = SasToken\n) ;\n\nGO\n\n\n-- SECURITY\n--*************************",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}